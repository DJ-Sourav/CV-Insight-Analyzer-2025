
import { useAnalysis } from '@/context/AnalysisContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import CircleProgress from '@/components/CircleProgress';
import { toast } from '@/lib/toast';
import { ArrowLeftIcon, RefreshCwIcon, DownloadIcon, CheckIcon, XIcon } from 'lucide-react';

const ResultStep = () => {
  const { analysisResult, setCurrentStep } = useAnalysis();
  
  if (!analysisResult) {
    return (
      <div className="flex flex-col items-center justify-center w-full max-w-3xl mx-auto px-4">
        <Card className="w-full">
          <CardContent className="py-10">
            <div className="text-center">
              <p>No analysis results found. Please complete the assessment.</p>
              <Button
                className="mt-4"
                onClick={() => setCurrentStep('upload')}
              >
                Start Over
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }
  
  const { resumeScore, assessmentScore, improvementPoints, overallScore, matchedSkills, unmatchedSkills, questionEvaluation } = analysisResult;
  
  const handleStartOver = () => {
    setCurrentStep('upload');
  };
  
  const handleDownloadReport = () => {
    // Create a report string
    const report = `
Resume Analysis Report

Overall Score: ${overallScore}/100

Resume Score: ${resumeScore.score}/100
Strengths:
${resumeScore.strengths.map(s => `- ${s}`).join('\n')}

Weaknesses:
${resumeScore.weaknesses.map(w => `- ${w}`).join('\n')}

Matched Skills:
${matchedSkills.map(s => `- ${s}`).join('\n')}

Unmatched Skills (Missing):
${unmatchedSkills.map(s => `- ${s}`).join('\n')}

Assessment Score: ${assessmentScore.score}/100
Feedback:
${assessmentScore.feedback}

Assessment Questions:
${questionEvaluation?.map(q => 
  `Q: ${q.question}\nA: ${q.answer}\nFeedback: ${q.feedback}\nScore: ${q.score}/100`
).join('\n\n')}

Improvement Points:
${improvementPoints.map(p => `- ${p}`).join('\n')}

Generated by Resume Analyzer
    `.trim();
    
    // Create a blob and download link
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'resume-analysis-report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('Report downloaded successfully');
  };
  
  return (
    <div className="flex flex-col items-center justify-center w-full max-w-3xl mx-auto px-4 animate-fade-in">
      <Card className="w-full shadow-sm border-0 ring-1 ring-slate-200 bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-center">Analysis Results</CardTitle>
          <CardDescription className="text-center">
            Here's your personalized resume analysis
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-8">
          <div className="flex flex-col md:flex-row items-center justify-center gap-6 md:gap-12">
            <div className="flex flex-col items-center">
              <CircleProgress 
                value={resumeScore.score} 
                label="Resume" 
                className="mb-2"
              />
              <p className="text-sm text-muted-foreground">Resume Score</p>
            </div>
            
            <div className="text-2xl font-bold">+</div>
            
            <div className="flex flex-col items-center">
              <CircleProgress 
                value={assessmentScore.score} 
                label="Assessment" 
                className="mb-2"
              />
              <p className="text-sm text-muted-foreground">Assessment Score</p>
            </div>
            
            <div className="text-2xl font-bold">=</div>
            
            <div className="flex flex-col items-center">
              <CircleProgress 
                value={overallScore} 
                label="Total" 
                size={140}
                strokeWidth={5}
                className="mb-2"
              />
              <p className="text-sm text-muted-foreground">Overall Score</p>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-3">
              <h3 className="text-lg font-semibold flex items-center">
                <CheckIcon className="h-5 w-5 text-green-500 mr-2" />
                Matched Skills
              </h3>
              <div className="bg-green-50 rounded-lg p-4">
                <ul className="space-y-1">
                  {matchedSkills.length > 0 ? (
                    matchedSkills.map((skill, index) => (
                      <li key={index} className="text-sm">
                        • {skill}
                      </li>
                    ))
                  ) : (
                    <li className="text-sm">No matched skills found</li>
                  )}
                </ul>
              </div>
            </div>
            
            <div className="space-y-3">
              <h3 className="text-lg font-semibold flex items-center">
                <XIcon className="h-5 w-5 text-red-500 mr-2" />
                Missing Skills
              </h3>
              <div className="bg-red-50 rounded-lg p-4">
                <ul className="space-y-1">
                  {unmatchedSkills.length > 0 ? (
                    unmatchedSkills.map((skill, index) => (
                      <li key={index} className="text-sm">
                        • {skill}
                      </li>
                    ))
                  ) : (
                    <li className="text-sm">No missing skills identified</li>
                  )}
                </ul>
              </div>
            </div>
          </div>
          
          <div className="space-y-4">
            <h3 className="text-lg font-semibold">Improvement Points</h3>
            <div className="bg-muted bg-opacity-50 rounded-lg p-4 max-h-60 overflow-y-auto">
              <ul className="space-y-2">
                {improvementPoints.map((point, index) => (
                  <li key={index} className="text-sm">
                    • {point}
                  </li>
                ))}
              </ul>
            </div>
          </div>
          
          {questionEvaluation && questionEvaluation.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Assessment Feedback</h3>
              <div className="space-y-4">
                {questionEvaluation.map((evaluation, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4">
                    <div className="grid grid-cols-[auto,1fr] gap-x-4 gap-y-2">
                      <span className="font-medium">Question:</span>
                      <span>{evaluation.question}</span>
                      
                      <span className="font-medium">Answer:</span>
                      <span>{evaluation.answer}</span>
                      
                      <span className="font-medium">Feedback:</span>
                      <span>{evaluation.feedback}</span>
                      
                      <span className="font-medium">Score:</span>
                      <div className="flex items-center">
                        <div className="bg-gray-200 h-2 w-24 rounded-full overflow-hidden">
                          <div 
                            className="bg-primary h-full" 
                            style={{ width: `${evaluation.score}%` }}
                          ></div>
                        </div>
                        <span className="ml-2 text-sm">{evaluation.score}/100</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <h3 className="text-base font-semibold">Resume Strengths</h3>
              <ul className="text-sm space-y-1">
                {resumeScore.strengths.map((strength, index) => (
                  <li key={index}>• {strength}</li>
                ))}
              </ul>
            </div>
            
            <div className="space-y-2">
              <h3 className="text-base font-semibold">Areas for Improvement</h3>
              <ul className="text-sm space-y-1">
                {resumeScore.weaknesses.map((weakness, index) => (
                  <li key={index}>• {weakness}</li>
                ))}
              </ul>
            </div>
          </div>
        </CardContent>
        <CardFooter className="flex flex-col sm:flex-row justify-between gap-3">
          <Button
            variant="outline"
            onClick={handleStartOver}
            className="w-full sm:w-auto flex items-center gap-2"
          >
            <RefreshCwIcon className="w-4 h-4" />
            Start Over
          </Button>
          
          <Button
            onClick={handleDownloadReport}
            className="w-full sm:w-auto flex items-center gap-2"
          >
            <DownloadIcon className="w-4 h-4" />
            Download Report
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
};

export default ResultStep;
